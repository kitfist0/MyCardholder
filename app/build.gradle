plugins {
    alias(libs.plugins.android.application)
    alias(libs.plugins.firebase.crashlytics)
    alias(libs.plugins.gms)
    alias(libs.plugins.hilt.android)
    alias(libs.plugins.kotlin.android)
    alias(libs.plugins.kotlin.kapt)
    alias(libs.plugins.ksp)
    alias(libs.plugins.safeargs.kotlin)
}

import com.android.build.gradle.internal.tasks.FinalizeBundleTask

android {
    compileSdk 34

    namespace 'my.cardholder'

    defaultConfig {
        applicationId "my.cardholder"
        applicationIdSuffix ".gp"
        minSdk 24
        targetSdk 34
        versionCode 11
        versionName "v1.0.10"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        buildConfigField("String", "APP_NAME", "\"MyCardholder\"")
        buildConfigField("String", "DEV_NAME", "\"MidnightDev\"")
        buildConfigField("String", "YEAR", "\"2024\"")
    }

    flavorDimensions = ["billing"]

    productFlavors {
        googleplay {
            dimension "billing"
            buildConfigField("String", "WEB_PAGE_LICENSE", "\"https://github.com/kitfist0/MyCardholder/blob/master/LICENSE\"")
            buildConfigField("String", "WEB_PAGE_POLICY", "\"https://github.com/kitfist0/MyCardholder/blob/master/POLICY.md\"")
            buildConfigField("String", "WEB_PAGE_REPO", "\"https://github.com/kitfist0/MyCardholder\"")
        }
        rustore {
            dimension "billing"
            buildConfigField("String", "WEB_PAGE_LICENSE", "\"https://gitverse.ru/kitfist0/MyCardholder/content/master/LICENSE\"")
            buildConfigField("String", "WEB_PAGE_POLICY", "\"https://gitverse.ru/kitfist0/MyCardholder/content/master/POLICY.md\"")
            buildConfigField("String", "WEB_PAGE_REPO", "\"https://gitverse.ru/kitfist0/MyCardholder\"")
        }
    }

    signingConfigs {
        debug {
            storeFile = rootProject.file('cert/debug.keystore')
            storePassword = 'android'
            keyAlias = 'cardholder'
            keyPassword = 'android'
        }
        release {
            storeFile = rootProject.file('cert/release.keystore')
            def propsFile = rootProject.file('cert/release.properties')
            def props = new Properties()
            props.load(new FileInputStream(propsFile))
            storePassword = props['store_password']
            keyAlias = props['alias']
            keyPassword = props['key_password']
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_21
        targetCompatibility JavaVersion.VERSION_21
    }

    buildFeatures {
        buildConfig = true
        viewBinding = true
    }

    // Rename APKs and AABs
    applicationVariants.configureEach { variant ->
        def artifactName = "${variant.flavorName.toLowerCase()}-${variant.versionCode}-${variant.buildType.name}"
        variant.outputs.configureEach {
            outputFileName = "${artifactName}.apk"
        }
        tasks.named("sign${variant.name.capitalize()}Bundle", FinalizeBundleTask) {
            File file = finalBundleFile.asFile.get()
            File finalFile = new File(file.parentFile, "${artifactName}.aab")
            finalBundleFile.set(finalFile)
        }
    }

    ksp {
        arg('room.schemaLocation', "$projectDir/schemas")
    }

    packagingOptions {
        resources.excludes += 'META-INF/DEPENDENCIES'
        resources.excludes += 'META-INF/INDEX.LIST'
        resources.excludes += 'META-INF/LICENSE'
        resources.excludes += 'META-INF/LICENSE.txt'
        resources.excludes += 'META-INF/license.txt'
        resources.excludes += 'META-INF/NOTICE'
        resources.excludes += 'META-INF/NOTICE.txt'
        resources.excludes += 'META-INF/notice.txt'
        resources.excludes += 'META-INF/ASL2.0'
        resources.excludes += 'META-INF/*.kotlin_module'
    }
}

dependencies {
    implementation(libs.androidx.activity.ktx)
    implementation(libs.androidx.appcompat)
    implementation(libs.androidx.camera.camera2)
    implementation(libs.androidx.camera.core)
    implementation(libs.androidx.camera.lifecycle)
    implementation(libs.androidx.camera.view)
    implementation(libs.androidx.concurrent.futures)
    implementation(libs.androidx.constraintlayout)
    implementation(libs.androidx.core.ktx)
    implementation(libs.androidx.datastore.preferences)
    implementation(libs.androidx.lifecycle.viewmodel)
    implementation(libs.androidx.navigation.fragment.ktx)
    implementation(libs.androidx.navigation.ui.ktx)
    implementation(libs.androidx.preference.ktx)
    ksp(libs.androidx.room.compiler)
    implementation(libs.androidx.room.ktx)
    implementation(libs.androidx.room.runtime)
    implementation(libs.androidx.splashscreen)
    implementation(libs.androidx.work.runtime)

    // Billing
    googleplayImplementation(libs.googleplay.billingclient)
    rustoreImplementation(libs.rustore.billingclient)

    // Coil
    implementation(libs.coil.kt)

    // Drive
    implementation(libs.google.api.client.android) {
        exclude group: 'org.apache.httpcomponents'
    }
    implementation(libs.google.api.services.drive) {
        exclude group: 'org.apache.httpcomponents'
    }
    implementation(libs.google.http.client.gson)
    implementation(libs.google.play.services.auth)

    // Firebase
    implementation platform(libs.google.firebase.bom)
    implementation(libs.google.firebase.analytics)
    implementation(libs.google.firebase.crashlytics)

    // Flexbox
    implementation(libs.google.flexbox)

    // Material
    implementation(libs.google.material)

    // Ml Kit
    implementation(libs.google.mlkit)

    // Hilt
    implementation(libs.hilt.android)
    kapt(libs.hilt.compiler)

    // Image Cropper
    implementation(libs.image.cropper)

    // Kotlin CSV
    implementation(libs.kotlin.csv)

    // Zxing
    implementation(libs.zxing.core)

    testImplementation(libs.junit)
    androidTestImplementation(libs.androidx.test.ext)
    androidTestImplementation(libs.androidx.test.espresso.core)
}
